Abstract Factory method pattern falls under Creational Pattern of Gang of Four (GOF) Design Patterns in .Net.
It is used to create a set of related objects, or dependent objects. Internally, Abstract Factory use Factory design pattern for creating objects. 
It may also use Builder design pattern and prototype design pattern for creating objects. 
It completely depends upon your implementation for creating objects. In this article, I would like share what is abstract factory pattern and how is it work?

What is Abstract Factory Pattern?
Abstract Factory patterns acts a super-factory which creates other factories. 
This pattern is also called as Factory of factories. In Abstract Factory pattern an interface is responsible 
for creating a set of related objects, or dependent objects without specifying their concrete classes.

Classes Used:
AbstractFactory
This is an interface which is used to create abstract product

ConcreteFactory
This is a class which implements the AbstractFactory interface to create concrete products.

AbstractProduct
This is an interface which declares a type of product.

ConcreteProduct
This is a class which implements the AbstractProduct interface to create product.

Client
This is a class which use AbstractFactory and AbstractProduct interfaces to create a family of related objects.

Who is what?
The classes, interfaces and objects in the above class diagram can be identified as follows:

VehicleFactory - AbstractFactory interface
HondaFactory & HeroFactory- Concrete Factories
Bike & Scooter - AbstractProduct interface
Regular Bike, Sports Bike, Regular Scooter & Scooty - Concreate Products
VehicleClient - Client

When to use it?
Create a set of related objects, or dependent objects which must be used together.
System should be configured to work with multiple families of products.
The creation of objects should be independent from the utilizing system.
Concrete classes should be decoupled from clients.
